DATETIME=$(date +'%d-%m-%Y_%H_%M_%S')
WHOAMI=$(whoami)
TYPE="backup"
DATABASE=""
DUMPHOST=""
DUMPPORT=""
DOCKERCONTAINER=""
USERNAME=""
INPUTFILE=""
OUTFOLDER=`pwd`"/backups/mongo"
ZIPFILE="NO"
OUTFILENAME=""

function help(){
        echo "  Mongo Parameter "
        echo "-t | --type | type action | ex: backup / restore | default: backup"
        echo "-d | --database | database name | ex: postgres | default: postgres"
        echo "--host | database host | ex: localhost / docker | default: localhost"
        echo "-u | --user | database user | ex: postgres | default: 'postgres'"
        echo "-p | --port | database port | ex: 5432 | default: 5432"
        echo "-c | --container | container | ex: docker_compose_1 | default: compose_2_postgresdb_1"
        echo "-i | --input | backup file | ex: file.bak | default: ''"
        echo "-o | --outfile | output file name | ex: backup_postgres.sql"
        echo "-f | --folder | output folder | ex: ./backup | default: '`pwd`/backup'"
        echo "-z | --zip | zip package"
        echo "-h | --help | help"
}

while [[ "$#" -gt 0 ]]; do case $1 in
  -t|--type) TYPE="$2"; shift;;
  -d|--database) DATABASE="$2"; shift;;
  --host) DUMPHOST="$2"; shift;;
  -u|--user) USERNAME="$2"; shift;;
  -p|--port) DUMPPORT="$2"; shift;;
  -c|--container) DOCKERCONTAINER="$2"; shift;;
  -i|--input) INPUTFILE="$2"; shift;;
  -o|--outfile) OUTFILENAME="$2"; shift;;
  -f|--folder) OUTFOLDER="$2"; shift;;
  -z|--zip) ZIPFILE="YES"; shift;;
  -h|--help) help && exit ; shift;;
  *) echo "Unknown parameter passed: $1"; exit 1;;
esac; shift; done

[ ! $DOCKERCONTAINER == "" ] && DOCKERNETWORK=$(docker inspect $DOCKERCONTAINER -f {{.HostConfig.NetworkMode}})
[ ! $DOCKERCONTAINER == "" ] && DUMPHOST=$(docker inspect $DOCKERCONTAINER -f {{ .NetworkSettings.Networks.compose2_default.IPAddress }})
echo "$DUMPHOST ========ini"
[ -z ${OUTFILENAME} ] && OUTFILENAME="MG_"
[ ${USERNAME} ] && OUTFILENAME="${OUTFILENAME}${USERNAME}_"
[ ${DATABASE} ] && OUTFILENAME="${OUTFILENAME}${DATABASE}_"
OUTFILENAME="${OUTFILENAME}$DATETIME"
OUTFILE=$OUTFOLDER"/"$OUTFILENAME

function initDumpMongo(){
        [ ${ZIPFILE} == "YES" ] && OUTFILENAME="${OUTFILENAME}.gz"
        [ ! -d ${OUTFOLDER} ] && mkdir -p ${OUTFOLDER} && echo "Success create Out Folder : ${OUTFOLDER}"
        OUTFILE=$OUTFOLDER"/"$OUTFILENAME

        echo "=====BACKUP-MONGO-CONFIG====";
        echo "DATABASE : ${DATABASE}";
        echo "HOST : ${DUMPHOST}";
        echo "PORT : ${DUMPPORT}";
        echo "USERNAME : ${USERNAME}";
        echo "OUT FILE : ${OUTFILE}";
        echo "ZIP : ${ZIPFILE}";
        [ ! ${DOCKERCONTAINER} == "" ] && echo "DOCKER CONTAINER : ${DOCKERCONTAINER}";
}

function dumpMongo(){
        echo "=====Initializing=====" && initDumpMongo && echo "Initialization done"
        echo "=====START-BACKUP====="
        CMD="mongodump  -v --out=/tmp"
        [ ${USERNAME} ] && CMD="$CMD --user $USERNAME"
	echo "${DUMPHOST} ====="
        [ ${DUMPHOST} ] && CMD="$CMD --host $DUMPHOST"
        [ ${DUMPPORT} ] && CMD="$CMD --port $DUMPPORT"
        [ ${DATABASE} ] && CMD="$CMD --db $DATABASE"
        [ ${ZIPFILE} == "YES" ] && CMD="$CMD --gzip"

        [ ! ${DOCKERCONTAINER} == "" ] && CMD="docker run -it --rm --net ${DOCKERNETWORK} --link ${DOCKERCONTAINER}:mongo -v ${OUTFILE}:/tmp mongo bash -c '$CMD && useradd ${WHOAMI} && chown -R ${WHOAMI} /tmp'"

        echo "Backing Up..."
        echo $CMD
        eval "$CMD" && echo "Success Backup" || echo "Backup Failed" || exit 1
        du -lsh $OUTFILE
}

function initRestMongo(){
        [ -z ${INPUTFILE} ] && echo "folder path: ${OUTFOLDER}"  && echo "choose backup file below:" && ls -ltrh ${OUTFOLDER} | tail -n '10' && echo "--input filename" && exit 1
#       [ ${ZIPFILE} == "YES" ] && OLDINPUTFILE=${INPUTFILE} &&  INPUTFILE=$(basename "$INPUTFILE" ".gz") && eval "gunzip ${OUTFOLDER}/${OLDINPUTFILE} -c > ${OUTFOLDER}/${INPUTFILE}" && echo "Unzip done"
}

function restMongo(){
        echo "=====Initializing=====" && initRestMongo && echo "Initialization done";
        echo "=====START-RESTORE=====";
        CMD="mongorestore -v "
        [ ${USERNAME} ] && CMD="$CMD --user $USERNAME"
        [ ${DUMPHOST} ] && CMD="$CMD --host $DUMPHOST"
        [ ${DUMPPORT} ] && CMD="$CMD --port $DUMPPORT"
        [ ${DATABASE} ] && CMD="$CMD --db $DATABASE"
        [ ${ZIPFILE} == "YES" ] && CMD="$CMD --gzip"
        CMD="${CMD} /tmp"

        [ ! ${DOCKERCONTAINER} == "" ] && CMD="docker run -it --rm --net ${DOCKERNETWORK} --link ${DOCKERCONTAINER}:mongo -v ${OUTFOLDER}/${INPUTFILE}:/tmp mongo bash -c '$CMD'"
        echo "Restoring..."
        echo $CMD
        eval "$CMD" && echo "Success restore" || echo "Restore Failed"
        #du -lsh $OUTFILE
#       [ $ZIPFILE == "YES" ] && echo "Cleaning..." && rm ${OUTFOLDER}/${INPUTFILE}
}

function main(){
        if [ ${TYPE} == "backup" ]; then
                dumpMongo
        elif [ ${TYPE} == "restore" ]; then
                restMongo
        else
                echo "--type [backup / restore]" && exit 1
        fi
        echo "===DONE==="
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
